<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       										http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       										http://www.springframework.org/schema/context 
            								http://www.springframework.org/schema/context/spring-context-3.0.xsd
            								http://www.springframework.org/schema/aop 
            								http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            								http://www.springframework.org/schema/cache
            								http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
            								http://www.springframework.org/schema/tx 
            								http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            								http://www.springframework.org/schema/mvc   
    										http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 打开Spring的Annotation支持，spring支持注解 -->
    <context:annotation-config />
	<!-- 搜索所定义的包下的所有注解 -->
	<context:component-scan base-package="com" />

	
		<!-- 配置拦截器  拦截某地址下的请求 .*/entryOrJsonController\.do\?action=reg.* -->
<!--	 <mvc:interceptors>  -->
<!--		<mvc:interceptor>  -->
<!--			<mvc:mapping path="/m/*.html"/>-->
<!--			<mvc:mapping path="/m/*/*.html"/>-->
<!--      		<bean class="com.haoow.nbd.interceptor.AccessInterceptor" />  -->
<!--      </mvc:interceptor>  -->
<!-- 		<mvc:interceptor>   -->
<!-- 			<mvc:mapping path="/*.html"/> -->
<!-- 			<mvc:mapping path="/*/*.html"/> -->
<!-- 			<mvc:mapping path="/*/*/*.html"/>	 -->
<!--       		<bean class="com.haoow.nbd.interceptor.LoginInterceptor" />   -->
<!--       </mvc:interceptor>   -->
<!--    </mvc:interceptors> -->
	
	<!-- 设置jdbc连接配置文档 -->
	<context:property-placeholder location="classpath:/jdbc.properties" />
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
              <property name="driverClassName"><value>${dataSource.driverClassName}</value></property> 
              <property name="url"><value>${dataSource.url}</value></property> 
              <property name="username"><value>${dataSource.username}</value></property> 
              <property name="password"><value>${dataSource.password}</value></property> 
    </bean> 
	<!-- 配置JDBC数据源 End -->
	<!-- 配置JDBC会话 Start -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${dataSource.dialect}</prop>
				<!-- 设定表生成策略 create为自动创建表（于tomcat启动时） update只对表增删改差，不创建表 -->
				<prop key="hibernate.hbm2ddl.auto">${dataSource.hbm2ddl.auto}</prop>
				<!-- 在控制台是否输出hibernate生成的原SQL -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 是否格式化SQL -->
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.gk666.backstage.model.entity</value><!-- 扫描此包下实体类， 也就是平时所说的 model -->
			</list>
		</property>
	</bean>
	<!-- 配置JDBC会话 End -->
	<!-- 将JDBC会话注入 hibernateTemplate -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>


	<!-- 配置事务管理 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 启动事务的注解，即Service中加的@Transactional -->
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true"/>

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
	
</beans>  